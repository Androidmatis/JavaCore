// Демонстрация низкоуровневого типа в действии.
class Gen<T> {
    T ob;   // Объявить объект типа T.
    Gen(T o) {
        ob = o;
    }
    // Возвратить ob.
    T getOb() {
        return ob;
    }
}
// Использование низкоуровневого типа.
class RawDemo {
    public static void main(String[] args) {
        // Создать объект Gen для объекта Integer.
        Gen<Integer> iOb = new Gen<Integer>(88);
        // Создать объект Gen для объекта String.
        Gen<String> strOb = new Gen<String>("Тест сообщений");
        // Создать низкоуровневый объект Gen и предоставить ему значение Double.
        Gen raw = new Gen<>(Double.valueOf(98.6));
        // Приведение здесь обязательно, потому что тип неизвестен.
        double d = (Double) raw.getOb();
        System.out.println("Значение: " + d);
        // Использование низкоуровневого типа может стать причиной
        // генерации исключений во время исполнения.
        // Вот несколько примеров.
        // Следующие приведения вызывают ошибку по время исполнения!
        // int i = (Integer) raw.getOb();  // Ошибка во время выполнения
        // Это присваивание обходит механизм безопасности типов.
        strOb = raw;    // Нормально, но потенциально неправильно
        // String str = strOb.getOb();  // Ошибка во время выполнения
        // Это присваивание обходит механизм безопасности типов.
        raw = iOb;   // Нормально, но потенциально неправильно
        // d = (Double) raw.getOb();   // Ошибка во время выполнения
    }
}
